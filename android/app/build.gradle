/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 *
 * Parts of this file are derived from SDL 2's Android project template, which
 * has a different license. Please see vendor/SDL/LICENSE.txt for details.
 */
def buildAsLibrary = project.hasProperty('BUILD_AS_LIBRARY')
def buildAsApplication = !buildAsLibrary
if (buildAsApplication) {
    apply plugin: 'com.android.application'
} else {
    apply plugin: 'com.android.library'
}
apply plugin: "com.github.willir.rust.cargo-ndk-android"
apply plugin: 'org.jetbrains.kotlin.android'

android {
    ndkVersion "25.2.9519653"
    compileSdkVersion 31
    defaultConfig {
        if (buildAsApplication) {
            applicationId "org.touchhle.android"
        }
        minSdkVersion 21 // first version with AArch64
        targetSdkVersion 31
        externalNativeBuild {
            ndkBuild {
                arguments "APP_PLATFORM=android-21"
                // abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
                // Only 'arm64-v8a' and 'x86_64' are supported by dynarmic
                // and hence touchHLE. The 'x86_64' build works, but the main
                // use for that would be the emulator in Android Studio, and
                // its OpenGL ES implementations don't seem to work properly
                // with touchHLE, so we disable it to reduce build time and
                // avoid shipping stuff we haven't meaningfully tested.
                // Make sure this matches the cargoNdk targets below.
                abiFilters 'arm64-v8a'
            }
        }
    }
    buildTypes {
        release {
            signingConfig signingConfigs.debug
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt')
            debuggable true // allow use of ADB to manage files, etc
        }
        debug {
            minifyEnabled false
            packagingOptions {
                doNotStrip '**/*.so'
            }
            debuggable true
            jniDebuggable true
        }
    }
    applicationVariants.all { variant ->
        tasks["merge${variant.name.capitalize()}Assets"]
                .dependsOn("externalNativeBuild${variant.name.capitalize()}")
    }

    if (!project.hasProperty('EXCLUDE_NATIVE_LIBS')) {
        sourceSets.main {
            jniLibs.srcDir "${projectDir}/jniLibs"
        }
        externalNativeBuild {
            ndkBuild {
                path 'jni/Android.mk'
            }
        }
    }

    lintOptions {
        abortOnError false
    }

    if (buildAsLibrary) {
        libraryVariants.all { variant ->
            variant.outputs.each { output ->
                def outputFile = output.outputFile
                if (outputFile != null && outputFile.name.endsWith(".aar")) {
                    def fileName = "org.touchhle.android.aar"
                    output.outputFile = new File(outputFile.parent, fileName)
                }
            }
        }
    }
}

cargoNdk {
    // Make sure this matches the android abiFilters above.
    targets = ["arm64"]
    module = ".."
    librariesNames = ["libtouchHLE.so", "libSDL2.so", "libc++_shared.so"]
    extraCargoEnv = ["ANDROID_NDK": android.ndkDirectory, "ANDROID_NDK_HOME": android.ndkDirectory]
    // The default feature, "static", makes us use static linking for SDL2 and OpenAL Soft.
    // For Android, we need dynamic linking for SDL2, but static linking for OpenAL Soft.
    extraCargoBuildArguments = ["--lib", "--no-default-features", "--features", "touchHLE_openal_soft_wrapper/static,sdl2/bundled"]
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
}
